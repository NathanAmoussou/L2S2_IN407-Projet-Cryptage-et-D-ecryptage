import tkinter as tk

test = "projet python"
while " " in test:
    test = test.replace(" ", "")


class Sommet(object):
    longueur = len(test)
    def __init__(self, lettre):
        self.lettre = lettre
        self.occurence = test.count(lettre) / Sommet.longueur


class ArbreB():
    def __init__(self, racine, fils_gauche=None, fils_droit=None):
        self.racine = racine
        self.fils_gauche = fils_gauche
        self.fils_droit = fils_droit
        self.representation = []


    def get_representation(self):
        return []



------

class Sommet(object):
    def __init__(self, valeur, lettre = None):
        self.valeur = valeur
        self.lettre = lettre


    def get_valeur(self):
        pass


class ArbreB(object):
    def __init__(self, racine, gauche=None, droite=None):
        self.racine = racine
        self.gauche = gauche
        self.droite = droite


    def get_racine(self):
        """Retourne un objet Sommet qui est la racine de l'arbre."""
        if self.racine is None:
            return Sommet(None)
        else:
            return self.racine


    def get_gauche(self):
        """Retourne un objet ArbreB qui est le sous-arbre gauche de l'arbre."""
        if self.gauche is None:
            return ArbreB(None)
        else:
            return self.gauche.get_racine()


    def get_droit(self):
        """Retourne un objet ArbreB qui est le sous-arbre droit de l'arbre."""
        if self.droite is None:
            return ArbreB(None)
        else:
            return self.droite.get_racine()


    def inserer_sommet(self, sommet): # insère un arbre en fait
        if sommet.racine.valeur < self.racine.valeur: # va à gauche
            if self.gauche is None:
                self.gauche = ArbreB(sommet)
            else:
                self.gauche.inserer_sommet(sommet)
        else: # va à droite
            if self.droite is None:
                self.droite = ArbreB(sommet)
            else:
                self.droite.inserer_sommet(sommet)


----



class Sommet(object):
    def __init__(self, valeur, lettre = None):
        self.valeur = valeur
        self.lettre = lettre


    def get_valeur(self):
        pass


class ArbreB(object):
    def __init__(self, racine, gauche=None, droite=None):
        self.racine = racine
        self.gauche = gauche
        self.droite = droite


    def get_racine(self):
        """Retourne un objet Sommet qui est la racine de l'arbre."""
        if self.racine is None:
            return Sommet(None)
        else:
            return self.racine


    def get_gauche(self):
        """Retourne un objet ArbreB qui est le sous-arbre gauche de l'arbre."""
        if self.gauche is None:
            return ArbreB(None)
        else:
            return self.gauche.get_racine()


    def get_droit(self):
        """Retourne un objet ArbreB qui est le sous-arbre droit de l'arbre."""
        if self.droite is None:
            return ArbreB(None)
        else:
            return self.droite.get_racine()


    def inserer_sommet(self, sommet): # insère un arbre en fait
        if sommet.racine.valeur < self.racine.valeur: # va à gauche
            if self.gauche is None:
                self.gauche = ArbreB(sommet)
            else:
                self.gauche.inserer_sommet(sommet)
        else: # va à droite
            if self.droite is None:
                self.droite = ArbreB(sommet)
            else:
                self.droite.inserer_sommet(sommet)


# Tests
# création de l'arbre
a = ArbreB(Sommet(5, 'a'))

b = ArbreB(Sommet(3, 'b'))

c = ArbreB(Sommet(7, 'c'))

d = ArbreB(Sommet(1, 'd'))

b.inserer_sommet(d)

a.inserer_sommet(b)

a.inserer_sommet(c)

# affichage des valeurs
# a
print(a.get_racine().valeur)
print(a.get_racine().lettre)

# a.g
print(a.get_gauche().get_racine().valeur)
print(a.get_gauche().get_racine().lettre)

# a.d
print(a.get_droit().get_racine().valeur)
print(a.get_droit().get_racine().lettre)

# b.g
print(a.get_gauche().get_gauche().get_racine().valeur) # on appelle get_gauche() deux fois car on est dans un sous-arbre
print(a.get_gauche().get_gauche().get_racine().lettre)

# b.d
print(a.get_gauche().get_droit().get_racine().valeur)
print(a.get_gauche().get_droit().get_racine().lettre)

# c.g
print(a.get_droit().get_gauche().get_racine().valeur)
print(a.get_droit().get_gauche().get_racine().lettre)

# c.d
print(a.get_droit().get_droit().get_racine().valeur)
print(a.get_droit().get_droit().get_racine().lettre)

# d.g
print(a.get_gauche().get_gauche().get_gauche().get_racine().valeur)
print(a.get_gauche().get_gauche().get_gauche().get_racine().lettre)

# d.d
print(a.get_gauche().get_gauche().get_droit().get_racine().valeur)
print(a.get_gauche().get_gauche().get_droit().get_racine().lettre)

# suppression de b
a.supprimer_sommet(3)



class ArbreBGUI(tk.Frame):
    def __init__(self, master, arbre):
        super().__init__(master)
        self.master = master
        self.arbre = arbre
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.canvas = tk.Canvas(self)
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.draw_arbre(self.arbre, 0, 0, 100, 100)

    def draw_arbre(self, arbre, x1, y1, x2, y2):
        if arbre is not None:
            x = (x1 + x2) / 2
            y = (y1 + y2) / 2
            self.canvas.create_oval(x - 10, y - 10, x + 10, y + 10)
            self.canvas.create_text(x, y, text=str(arbre.racine.valeur))
            if arbre.gauche is not None:
                self.draw_arbre(arbre.gauche, x1, y1, x, y)
            if arbre.droite is not None:
                self.draw_arbre(arbre.droite, x, y1, x2, y)




root = tk.Tk()
app = ArbreBGUI(root, arbre_a)
app.mainloop()


def __contains__(self, valeur):
        """
        Vérifie si une valeur donnée est contenue dans l'arbre binaire de recherche.
        :param valeur: La valeur à rechercher dans l'arbre binaire de recherche.
        :return: True si la valeur est trouvée dans l'arbre binaire de recherche, False sinon.
        """
        return self.rechercher_element(valeur) is not None

    def fusion(self, autre_arbre):
        """
        Fusionne cet arbre binaire de recherche avec un autre arbre binaire de recherche.
        :param autre_arbre: L'autre objet ArbreB à fusionner avec cet arbre binaire de recherche.
        """
        if autre_arbre is not None:
            self.inserer_arbre(ArbreB(autre_arbre.racine))
            self.fusion(autre_arbre.gauche)
            self.fusion(autre_arbre.droite)


import tkinter as tk

class Sommet(object):
    def __init__(self, valeur, lettre=None):
        """
        Initialise un objet Sommet avec une valeur et une lettre optionnelle.
        :param valeur: La valeur du sommet.
        :param lettre: La lettre associée au sommet (optionnelle).
        """
        self.valeur = valeur
        self.lettre = lettre


class ArbreB(object):
    def __init__(self, racine, gauche=None, droite=None):
        """
        Initialise un objet ArbreB avec une racine et des sous-arbres gauche et droit optionnels.
        :param racine: L'objet Sommet qui est la racine de l'arbre.
        :param gauche: L'objet ArbreB qui est le sous-arbre gauche de l'arbre (optionnel).
        :param droite: L'objet ArbreB qui est le sous-arbre droit de l'arbre (optionnel).
        """
        self.racine = racine
        self.gauche = gauche
        self.droite = droite

    def get_racine(self):
        """
        Retourne un objet Sommet qui est la racine de l'arbre.
        :return: L'objet Sommet qui est la racine de l'arbre.
        """
        return self.racine

    def get_gauche(self):
        """
        Retourne un objet ArbreB qui est le sous-arbre gauche de l'arbre.
        :return: L'objet ArbreB qui est le sous-arbre gauche de l'arbre.
        """
        return self.gauche

    def get_droit(self):
        """
        Retourne un objet ArbreB qui est le sous-arbre droit de l'arbre.
        :return: L'objet ArbreB qui est le sous-arbre droit de l'arbre.
        """
        return self.droite
    
    def inserer_arbre(self, arbre): # inserer_sommet()
        """
        Insère un objet ArbreB dans l'arbre binaire de recherche.
        :param arbre: L'objet ArbreB à insérer dans l'arbre binaire de recherche.
        """
        if arbre.racine.valeur < self.racine.valeur:
            if self.gauche is None:
                self.gauche = arbre
            else:
                self.gauche.inserer_arbre(arbre)
        else:
            if self.droite is None:
                self.droite = arbre
            else:
                self.droite.inserer_arbre(arbre)

    def __add__(self, arbre):
        if arbre.get_gauche() is None and arbre.get_droit() is None:
            self.inserer_arbre(arbre)
            return self
        else:
            self.fusion(arbre)
            return self
    
    def __iadd__(self, arbre):
        if arbre.get_gauche() is None and arbre.get_droit() is None:
            self.inserer_arbre(arbre)
            return self
        else:
            self.fusion(arbre)
            return self

    def supprimer_arbre(self, valeur): # supprimer sommet
        """
        Supprime un objet ArbreB avec une valeur donnée de l'arbre binaire de recherche.
        :param valeur: La valeur de l'objet ArbreB à supprimer de l'arbre binaire de recherche.
        """
        if self.racine.valeur == valeur:
            if self.gauche is None and self.droite is None:
                return None
            elif self.gauche is None:
                return self.droite
            elif self.droite is None:
                return self.gauche
            else:
                successeur = self.droite
                while successeur.gauche is not None:
                    successeur = successeur.gauche
                self.racine = successeur.racine
                self.droite = self.droite.supprimer_arbre(successeur.racine.valeur)
                return self
        elif valeur < self.racine.valeur and self.gauche is not None:
            self.gauche = self.gauche.supprimer_arbre(valeur)
            return self
        elif valeur > self.racine.valeur and self.droite is not None:
            self.droite = self.droite.supprimer_arbre(valeur)
            return self
        else:
            return self

    def __sub__(self, valeur):
        self.supprimer_arbre(valeur)
        return self
    
    def __isub__(self, valeur):
        self.supprimer_arbre(valeur)
        return self

    def modifier_etiquette_arbre(self, valeur, nouvelle_valeur):
        """
        Modifie l'étiquette d'un objet ArbreB avec une valeur donnée dans l'arbre binaire de recherche.
        :param valeur: La valeur de l'objet ArbreB dont l'étiquette doit être modifiée.
        :param nouvelle_valeur: La nouvelle valeur à attribuer à l'étiquette de l'objet ArbreB.
        """
        if self.racine.valeur == valeur:
            self.racine.valeur = nouvelle_valeur
        elif valeur < self.racine.valeur and self.gauche is not None:
            self.gauche.modifier_etiquette_arbre(valeur, nouvelle_valeur)
        elif valeur > self.racine.valeur and self.droite is not None:
            self.droite.modifier_etiquette_arbre(valeur, nouvelle_valeur)

    def rechercher_element(self, valeur):
        """
        Recherche un objet ArbreB avec une valeur donnée dans l'arbre binaire de recherche.
        :param valeur: La valeur de l'objet ArbreB à rechercher dans l'arbre binaire de recherche.
        :return: L'objet ArbreB trouvé ou None si aucun objet ArbreB avec la valeur donnée n'est trouvé.
        """
        if self.racine.valeur == valeur:
            return self
        elif valeur < self.racine.valeur and self.gauche is not None:
            return self.gauche.rechercher_element(valeur)
        elif valeur > self.racine.valeur and self.droite is not None:
            return self.droite.rechercher_element(valeur)
        else:
            return None

    def fusion(self, autre_arbre):
        if autre_arbre is not None:
            if self.racine is None:
                self.racine = autre_arbre.racine
                self.gauche = autre_arbre.gauche
                self.droite = autre_arbre.droite
            elif autre_arbre.racine.valeur < self.racine.valeur:
                if self.gauche is None:
                    self.gauche = ArbreB(autre_arbre.racine, autre_arbre.gauche, autre_arbre.droite)
                else:
                    self.gauche.fusion(autre_arbre)
            else:
                if self.droite is None:
                    self.droite = ArbreB(autre_arbre.racine, autre_arbre.gauche, autre_arbre.droite)
                else:
                    self.droite.fusion(autre_arbre)

    def decomposition(self):
        """
        Décompose cet arbre binaire de recherche en une liste d'éléments.
        :return: Une liste d'objets Sommet représentant les éléments de l'arbre binaire de recherche.
        """
        elements = []
        if self.gauche is not None:
            elements.extend(self.gauche.decomposition())
        elements.append(self.racine)
        if self.droite is not None:
            elements.extend(self.droite.decomposition())
        return elements

    def __str__(self):
        return str([(str(arbre.lettre),str(arbre.valeur)) for arbre in self.decomposition()])

class ArbreBinaire(tk.Canvas):
    def __init__(self, master, arbre, *args, **kwargs):
        tk.Canvas.__init__(self, master, *args, **kwargs)
        self.arbre = arbre
        self.width = 800
        self.height = 600
        self.diametre_cercle = 50
        self.espacement_horiz = 50
        self.espacement_vert = 100
        self.positions = {}

    def afficher(self):
        self.delete(tk.ALL)
        self.positions.clear()
        self._afficher_sous_arbre(self.arbre, self.width / 2, 0, self.width / 4)

    def _afficher_sous_arbre(self, arbre, x, y, h):
        if arbre is not None:
            gauche = self._afficher_sous_arbre(arbre.gauche, x - h, y + self.espacement_vert, h / 2)
            droite = self._afficher_sous_arbre(arbre.droite, x + h, y + self.espacement_vert, h / 2)
            cercle = self.create_oval(x - self.diametre_cercle / 2, y, x + self.diametre_cercle / 2, y + self.diametre_cercle, fill="white", width=2)
            texte = self.create_text(x, y + self.diametre_cercle / 2, text=str(arbre.racine.valeur))
            self.positions[arbre] = (x, y, cercle, texte)
            if gauche is not None:
                self.create_line(x, y + self.diametre_cercle / 2, gauche[0], gauche[1] + self.diametre_cercle / 2, width=2)
            if droite is not None:
                self.create_line(x, y + self.diametre_cercle / 2, droite[0], droite[1] + self.diametre_cercle / 2, width=2)
            return x, y
        else:
            return None


from fonctions_partie_2 import *

texte = "Projet Python"

#print(occurence(texte))

arbre = construire_arbreB_Huffman(texte)


fenetre = tk.Tk()
canvas = ArbreBinaire(fenetre, arbre, width=800, height=600)
canvas.pack()
canvas.afficher()

fenetre.mainloop()


def afficher_arbre_binaire(arbreB):
    """
    Affiche un arbre binaire de recherche dans une fenêtre graphique.
    :param arbreB: L'arbre binaire de recherche à afficher.
    """
    # Création de la fenêtre
    fenetre = Tk()
    # Création du canevas
    canevas = Canvas(fenetre, width=800, height=600, bg="white")
    # Affichage de l'arbre
    arbreB.afficher_arbre_binaire(canevas, 400, 20, 400)
    # Affichage du canevas
    canevas.pack()
    # Affichage de la fenêtre
    fenetre.mainloop()